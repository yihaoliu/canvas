{"dependencies":[{"name":"./utils"},{"name":"./rect"},{"name":"./data"},{"name":"./utils/addEvent"},{"name":"../images/bg.png"}],"generated":{"js":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _rect = require(\"./rect\");\n\nvar _rect2 = _interopRequireDefault(_rect);\n\nvar _data = require(\"./data\");\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _addEvent = require(\"./utils/addEvent\");\n\nvar _addEvent2 = _interopRequireDefault(_addEvent);\n\nvar _bg = require(\"../images/bg.png\");\n\nvar _bg2 = _interopRequireDefault(_bg);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (glbal) {\n\n  var img = new Image();\n  img.src = _bg2.default;\n\n  var myCan = function myCan() {\n    var win = _utils2.default.getWindowDetil();\n    this.width = win.width;\n    this.height = win.height;\n    this.elem = null;\n    this.ctx = null;\n    this.img = null;\n    this.data = [].concat(_data2.default);\n    this.imgOrigin = {\n      x: 0,\n      y: 0\n      //鼠标坐标其实是坐标原点的位置\n    };this.mouse = {\n      x: null,\n      y: null\n    };\n    this.mobile = {\n      x: 0,\n      y: 0\n    };\n\n    this.zoom = 1;\n  };\n  myCan.prototype.render = function (elem, canDetail, callback) {\n    var that = this;\n    var node = document.createElement(\"canvas\");\n    node.style.margin = 0;\n    node.style.padding = 0;\n    if (canDetail) {\n      for (var key in canDetail) {\n        node[key] = canDetail[key];\n      }\n    }\n    if (!canDetail || !canDetail.width) {\n      node.width = this.width;\n    }\n    if (!canDetail || !canDetail.height) {\n      node.height = this.height;\n    }\n    elem.appendChild(node);\n    //鼠标监听\n    listener(node, 'mousedown', function (detail) {\n      that.mouse = Object.assign(that.mouse, detail);\n      var zoom = that.zoom;\n      for (var i = 0; i < that.data.length; i++) {\n        var item = that.data[i];\n        var max = {\n          x: (item.x + item.width) * zoom,\n          y: (item.y + item.height) * zoom\n        };\n        var min = {\n          x: item.x * zoom,\n          y: item.y * zoom\n        };\n        var mousToRect = false;\n        var haveMous = that.mouse.x && that.mouse.y;\n        if (haveMous && that.mouse.x > min.x && that.mouse.x < max.x && that.mouse.y > min.y && that.mouse.y < max.y) {\n          item.mousToRect = !item.mousToRect;\n          that.data[i] = item;\n          break;\n        }\n      }\n      that.draw();\n    });\n    //滚轮监听\n    listener(node, \"mousewheel\", function (detail) {\n      if (event.delta < 0) {\n        that.zoom -= 0.02;\n      } else {\n        that.zoom += 0.02;\n      }\n      that.mouse = Object.assign(that.mouse, detail);\n      that.mobile.x = (1 - that.zoom) * (that.mouse.x - that.imgOrigin.x);\n      that.mobile.y = (1 - that.zoom) * (that.mouse.y - that.imgOrigin.y);\n      that.imgOrigin.x = that.imgOrigin.x + that.mobile.x;\n      that.imgOrigin.y = that.imgOrigin.y + that.mobile.y;\n      that.draw();\n    });\n\n    this.elem = node;\n    this.ctx = node.getContext('2d');\n    img.onload = function () {\n      that.draw();\n    };\n    callback && callback();\n    return node;\n  };\n  myCan.prototype.draw = function (detail) {\n    var _this = this;\n\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    var rectArr = [];\n    this.img = img;\n    this.ctx.drawImage(this.img, this.imgOrigin.x, this.imgOrigin.y, img.width * this.zoom, img.height * this.zoom);\n    this.data.map(function (item, index) {\n\n      var newRect = new _rect2.default();\n      var everyOrigin = item;\n      everyOrigin.x = everyOrigin.x + _this.mobile.x;\n      everyOrigin.y = everyOrigin.y + _this.mobile.y;\n      _this.data[index] = everyOrigin;\n\n      newRect.draw(_this.ctx, everyOrigin, _this.zoom);\n    });\n  };\n  var newCan = new myCan();\n  var app = document.getElementById(\"app\");\n  newCan.render(app);\n  function dataFilter() {}\n  function listener(elem, type, callback) {\n    (0, _addEvent2.default)(elem, type, function (event) {\n      var e = event || window.event;\n      var mouse = {\n        x: e.clientX,\n        y: e.clientY\n      };\n      var elemDetail = elem.getBoundingClientRect();\n      var mouseToCan = { x: mouse.x - elemDetail.x, y: mouse.y - elemDetail.y };\n      var thatEvent = Object.assign({}, e);\n\n      callback && callback(Object.assign(thatEvent, mouseToCan));\n    }, false);\n  }\n})(undefined);"},"hash":"994a777d9283d43265b8f3ed76a0d413"}